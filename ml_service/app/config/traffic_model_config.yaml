# ml_service/app/config/traffic_model_config.yaml
model:
  name: "traffic_congestion_predictor"
  type: "sklearn"
  algorithm: "random_forest"
  device_types: ["traffic_sensor"]
  description: "Predicts traffic congestion level using rule-based target generation"

training:
  features: 
    - "vehicle_count"
    - "average_speed"
    - "lane_occupancy"
    - "time_of_day"
    - "day_of_week"
  
  # NEW: Configuration-driven target generation
  target_generation:
    type: "rule_based"
    default_target: "low"
    rules:
      # Critical congestion: High vehicles + Very slow speed
      - condition:
          and:
            - vehicle_count: {gt: 80}
            - average_speed: {lt: 15}
        target: "critical"
      
      # High congestion: Many vehicles + Slow speed
      - condition:
          and:
            - vehicle_count: {gt: 50}
            - average_speed: {lt: 30}
        target: "high"
      
      # Medium congestion during rush hours
      - condition:
          and:
            - vehicle_count: {gt: 25}
            - average_speed: {lt: 50}
            - or:
                - time_of_day: {between: [7, 9]}    # Morning rush
                - time_of_day: {between: [17, 19]}  # Evening rush
        target: "medium"
      
      # Medium congestion: Moderate traffic
      - condition:
          and:
            - vehicle_count: {between: [25, 50]}
            - average_speed: {between: [30, 50]}
        target: "medium"
      
      # High occupancy regardless of count
      - condition:
          lane_occupancy: {gt: 0.8}
        target: "high"
      
      # Weekend adjustment (generally lighter traffic)
      - condition:
          and:
            - day_of_week: {in: [6, 7]}  # Saturday, Sunday
            - vehicle_count: {lt: 40}
            - average_speed: {gt: 40}
        target: "low"
      
      # Default rule
      - condition: "default"
        target: "low"

  validation_split: 0.2
  
  # Optional: Advanced training parameters
  parameters:
    n_estimators: 100
    max_depth: 15
    random_state: 42
    min_samples_split: 5
    min_samples_leaf: 2

inference:
  output_format: "classification"
  class_labels: ["low", "medium", "high", "critical"]
  
  # Optional: Confidence thresholds
  confidence_thresholds:
    low: 0.7
    medium: 0.8
    high: 0.9
    critical: 0.95
  
  # Optional: Output enrichment
  output_fields:
    recommended_speed: "dynamic"
    alert_level: "computed"
    traffic_flow_status: "derived"

storage:
  model_path: "models/traffic_congestion_predictor"
  version_strategy: "timestamp"



# Alternative: ml_service/app/config/traffic_formula_config.yaml
# Formula-based traffic model for comparison
# model:
#   name: "traffic_congestion_formula"
#   type: "sklearn"
#   algorithm: "random_forest"
#   device_types: ["traffic_sensor"]
#   description: "Traffic congestion using formula-based target generation"

# training:
#   features: 
#     - "vehicle_count"
#     - "average_speed"
#     - "lane_occupancy"
#     - "time_of_day"
#     - "day_of_week"
  
#   target_generation:
#     type: "formula"
#     return_type: "str"
#     expression: |
#       # Traffic congestion index calculation
#       # Normalize inputs
#       vehicle_norm = min(vehicle_count / 100.0, 1.0)  # Assume 100 vehicles is max capacity
#       speed_factor = max(0, (60 - average_speed) / 60)  # Invert speed (slower = worse)
#       occupancy_factor = lane_occupancy  # Already 0-1
      
#       # Base congestion score
#       congestion_score = (
#           vehicle_norm * 0.4 +
#           speed_factor * 0.4 +
#           occupancy_factor * 0.2
#       )
      
#       # Time-based adjustments
#       rush_multiplier = 1.0
#       if 7 <= time_of_day <= 9 or 17 <= time_of_day <= 19:
#           if day_of_week <= 5:  # Weekday
#               rush_multiplier = 1.3
#           else:  # Weekend
#               rush_multiplier = 1.1
      
#       # Final score
#       final_score = congestion_score * rush_multiplier
      
#       # Convert to categories
#       if final_score > 0.8:
#           result = "critical"
#       elif final_score > 0.6:
#           result = "high"
#       elif final_score > 0.3:
#           result = "medium"
#       else:
#           result = "low"

#   validation_split: 0.2

# inference:
#   output_format: "classification"
#   class_labels: ["low", "medium", "high", "critical"]

# storage:
#   model_path: "models/traffic_congestion_formula"
#   version_strategy: "timestamp"